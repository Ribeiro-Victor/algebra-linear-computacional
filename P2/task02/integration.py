from P1.task01.lu_method import LU_Method
import math

class Integration:

    #Tabulation gotten from https://pomax.github.io/bezierinfo/legendre-gauss.html
    legendre_weight = { 2: [1.0, 1.0],
                        3: [0.8888888888888888, 0.5555555555555556, 0.5555555555555556],
                        4: [0.6521451548625461, 0.6521451548625461, 0.3478548451374538, 0.3478548451374538],
                        5: [0.5688888888888889, 0.4786286704993665, 0.4786286704993665, 0.2369268850561891, 0.2369268850561891],
                        6: [0.3607615730481386, 0.3607615730481386, 0.4679139345726910, 0.4679139345726910, 0.1713244923791704, 0.1713244923791704],
                        7: [0.4179591836734694, 0.3818300505051189, 0.3818300505051189, 0.2797053914892766, 0.2797053914892766, 0.1294849661688697, 0.1294849661688697],
                        8: [0.3626837833783620, 0.3626837833783620, 0.3137066458778873, 0.3137066458778873, 0.2223810344533745, 0.2223810344533745, 0.1012285362903763, 0.1012285362903763],
                        9: [0.3302393550012598, 0.1806481606948574, 0.1806481606948574, 0.0812743883615744, 0.0812743883615744, 0.3123470770400029, 0.3123470770400029, 0.2606106964029354, 0.2606106964029354],
                        10: [0.2955242247147529, 0.2955242247147529, 0.2692667193099963, 0.2692667193099963, 0.2190863625159820, 0.2190863625159820, 0.1494513491505806, 0.1494513491505806, 0.0666713443086881, 0.0666713443086881]
    }
    legendre_points = { 2: [-0.5773502691896257, 0.5773502691896257],
                        3: [0.0, -0.7745966692414834, 0.7745966692414834],
                        4: [-0.3399810435848563, 0.3399810435848563, -0.8611363115940526, 0.8611363115940526],
                        5: [0.0, -0.5384693101056831, 0.5384693101056831, -0.9061798459386640, 0.9061798459386640],
                        6: [0.6612093864662645, -0.6612093864662645, -0.2386191860831969, 0.2386191860831969, -0.9324695142031521, 0.9324695142031521],
                        7: [0.0, 0.4058451513773972, -0.4058451513773972, -0.7415311855993945, 0.7415311855993945, -0.9491079123427585, 0.9491079123427585],
                        8: [-0.1834346424956498, 0.1834346424956498, -0.5255324099163290, 0.5255324099163290, -0.7966664774136267, 0.7966664774136267, -0.9602898564975363, 0.9602898564975363],
                        9: [0.0, -0.8360311073266358, 0.8360311073266358, -0.9681602395076261, 0.9681602395076261, -0.3242534234038089, 0.3242534234038089, -0.6133714327005904, 0.6133714327005904],
                        10: [-0.1488743389816312, 0.1488743389816312, -0.4333953941292472, 0.4333953941292472, -0.6794095682990244, 0.6794095682990244, -0.8650633666889845, 0.8650633666889845, -0.9739065285171717, 0.9739065285171717]
    }

    def __init__(self, c1, c2, c3, c4):
        self.c1 = c1
        self.c2 = c2
        self.c3 = c3
        self.c4 = c4

    def get_func_value(self, x):
        try:
            return self.c1*math.exp(self.c2*x) + self.c3*(x**self.c4)
        except OverflowError:
            return float('inf')
    

    def polynomial_quadrature(self, a, b, n):
        delta_x = abs(b-a) / (n-1)
        points_vector = []
        vector_b = []

        for i in range(1, n+1):
            points_vector.append(a + ((i-1)*delta_x))
            vector_b.append(((b**i)-(a**i))/i)
        
        vandermond_matrix = [ [0.0 for i in range(n)] for j in range(n)]

        for i in range(n):
            for j in range(n):
                vandermond_matrix[i][j] = points_vector[j]**i
            
        solution = LU_Method(n, False, vandermond_matrix, vector_b).solve()
        weight_solution = solution['vector']

        result = 0
        for i in range(n):
            result += weight_solution[i]*self.get_func_value(points_vector[i])
        
        return result
    
    def legendre_gauss_quadrature(self, a, b, n):
        l = b-a
        weight_from_table = self.legendre_weight.get(n)
        points_from_table = self.legendre_points.get(n)

        x=[]
        for i in range(n):
            x.append(0.5*(a+b+(points_from_table[i]*l)))
        
        result = 0
        for i in range(n):
            result += self.get_func_value(x[i])*weight_from_table[i]
        result = result * (l/2)

        return result



def run_test():
    i = Integration(-1, 1, 10, 1)
    print(i.polynomial_quadrature(2, 3, 4))
    
    